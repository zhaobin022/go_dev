// {NOLINT}

package main

import (
	"regexp"
)

/* THIS FILE IS AUTOMATICALLY GENERATED BY genrules.pl */

var LineLinters = []LineLinter{
// style:trailing-whitespace - Trailing whitespace found ([ \t]$)
RegexLinter{
	LinterDesc{
		"style",
		"trailing-whitespace",
		"Trailing whitespace found"},
	`[ \t]$`},
// style:semicolon - Unnecessary semicolon use is discouraged (;$)
RegexLinter{
	LinterDesc{
		"style",
		"semicolon",
		"Unnecessary semicolon use is discouraged"},
	`;$`},
// style:comma-whitespace - Whitespace should follow a comma (,[^ \t])
RegexLinter{
	LinterDesc{
		"style",
		"comma-whitespace",
		"Whitespace should follow a comma"},
	`,[^ \t]`},
// style:tabs-only - Only tabs should be used for indentation (^\t* +)
RegexLinter{
	LinterDesc{
		"style",
		"tabs-only",
		"Only tabs should be used for indentation"},
	`^\t* +`},
// style:embedded-tabs - Tabs should only be used for indentation ([^ \t]\t)
RegexLinter{
	LinterDesc{
		"style",
		"embedded-tabs",
		"Tabs should only be used for indentation"},
	`[^ \t]\t`},
// style:deep-indent - More than 5 levels of indentation
SimpleLineLinter{
	LinterDesc{
		"style",
		"deep-indent",
		"More than 5 levels of indentation"},
	func (line string) (bool, string) {
	indent := 0
	for _, c := range line {
		if c == '\t' {
			indent += 1
		} else {
			break
		}
	}
	return indent > 5, ""
}},
// style:line-length - Line length should not exceed 80 characters
SimpleLineLinter{
	LinterDesc{
		"style",
		"line-length",
		"Line length should not exceed 80 characters"},
	func (line string) (bool, string) {
	ll := 0
	for _, c := range line {
		if c == '\t' {
			ll += 8
		} else {
			ll += 1
		}
	}
	return ll > 80, ""
}},
// misc:todo - TODO notice
SimpleLineLinter{
	LinterDesc{
		"misc",
		"todo",
		"TODO notice"},
	func (line string) (bool, string) {
	r := regexp.MustCompile("(//+|/\\*) *((TODO|FIXME|XXX)( (.*))?)$")
	ms := r.FindStringSubmatch(line)
	if ms != nil {
		return true, ms[2]
	}
	return false, ""
}},
}

var ParsingLinters = [...]ParsingLinter{
OverlappingImportsLinter{},
VariableDeprecationLinter{
	// osocreate	os	O_CREAT		O_CREAT has been renamed to O_CREATE	gofix:osopen
	LinterDesc{
		"deprecation",
		"osocreate",
		"O_CREAT has been renamed to O_CREATE"},
	"os",
	"O_CREAT",
	DeprecationNotes{
		"osopen"}},
FunctionDeprecationLinter{
	// osopen		os		Open		.,.,.	incorrect os.Open API used		gofix:osopen
	LinterDesc{
		"deprecation",
		"osopen",
		"incorrect os.Open API used"},
	"os",
	"Open",
	[]string{
		".",
		".",
		".",
	},
	DeprecationNotes{
		"osopen"}},
FunctionDeprecationLinter{
	// httpfinalurl	http/client	Get		.,.,.	incorrect client.Get API used		gofix:httpfinalurl
	LinterDesc{
		"deprecation",
		"httpfinalurl",
		"incorrect client.Get API used"},
	"http/client",
	"Get",
	[]string{
		".",
		".",
		".",
	},
	DeprecationNotes{
		"httpfinalurl"}},
FunctionDeprecationLinter{
	// netdial		net		Dial		.,.,.	incorrect net.Dial API used		gofix:netdial
	LinterDesc{
		"deprecation",
		"netdial",
		"incorrect net.Dial API used"},
	"net",
	"Dial",
	[]string{
		".",
		".",
		".",
	},
	DeprecationNotes{
		"netdial"}},
FunctionDeprecationLinter{
	// netlookup	net		LookupHost	.,.,.	incorrect net.LookupHost API used	gofix:netlookup
	LinterDesc{
		"deprecation",
		"netlookup",
		"incorrect net.LookupHost API used"},
	"net",
	"LookupHost",
	[]string{
		".",
		".",
		".",
	},
	DeprecationNotes{
		"netlookup"}},
FunctionDeprecationLinter{
	// tlsdial		crypto/tls	Dial		.,.,.,.	incorrect tls.Dial API used		gofix:tlsdial
	LinterDesc{
		"deprecation",
		"tlsdial",
		"incorrect tls.Dial API used"},
	"crypto/tls",
	"Dial",
	[]string{
		".",
		".",
		".",
		".",
	},
	DeprecationNotes{
		"tlsdial"}},
FunctionDeprecationLinter{
	// stringssplit	strings		Split		.,.,.	old form of strings.Split used - use SplitN instead	gofix:stringssplit
	LinterDesc{
		"deprecation",
		"stringssplit",
		"old form of strings.Split used - use SplitN instead"},
	"strings",
	"Split",
	[]string{
		".",
		".",
		".",
	},
	DeprecationNotes{
		"stringssplit"}},
}
